// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Helpers;

namespace WebApi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApi.Entities.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CauserId")
                        .HasColumnName("causer_id")
                        .HasColumnType("int");

                    b.Property<string>("CauserType")
                        .HasColumnName("causer_type")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogName")
                        .HasColumnName("log_name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Properties")
                        .HasColumnName("properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubjectId")
                        .HasColumnName("subject_id")
                        .HasColumnType("int");

                    b.Property<string>("SubjectType")
                        .HasColumnName("subject_type")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("LogName")
                        .HasName("activity_log_log_name_index");

                    b.ToTable("activity_log");
                });

            modelBuilder.Entity("WebApi.Entities.Addresses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ClientId")
                        .HasColumnName("client_id")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Line1")
                        .HasColumnName("line_1")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Line2")
                        .HasColumnName("line_2")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte?>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Zip4")
                        .HasColumnName("zip_4")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Zipcode")
                        .HasColumnName("zipcode")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Line1", "Line2", "City", "Zipcode", "ClientId", "Type")
                        .HasName("ix_cyprus_address_client_id_type");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("WebApi.Entities.AffiliationPeriods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("StatDate")
                        .HasColumnName("stat_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("affiliation_periods");
                });

            modelBuilder.Entity("WebApi.Entities.Agencies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("agencies");
                });

            modelBuilder.Entity("WebApi.Entities.Alianzas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AffFlag")
                        .HasColumnName("aff_flag")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("AffStatus")
                        .HasColumnName("aff_status")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("AffType")
                        .HasColumnName("aff_type")
                        .HasColumnType("tinyint");

                    b.Property<int>("ClientProductId")
                        .HasColumnName("client_product_id")
                        .HasColumnType("int");

                    b.Property<bool?>("Coordination")
                        .HasColumnName("coordination")
                        .HasColumnType("bit");

                    b.Property<double?>("CoverAmount")
                        .HasColumnName("cover_amount")
                        .HasColumnType("float");

                    b.Property<int>("CoverId")
                        .HasColumnName("cover_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ElegibleDate")
                        .HasColumnName("elegible_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<string>("EndReason")
                        .HasColumnName("end_reason")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("Joint")
                        .HasColumnName("joint")
                        .HasColumnType("float");

                    b.Property<bool?>("LifeInsurance")
                        .HasColumnName("life_insurance")
                        .HasColumnType("bit");

                    b.Property<double?>("LifeInsuranceAmount")
                        .HasColumnName("life_insurance_amount")
                        .HasColumnType("float");

                    b.Property<bool?>("MajorMedical")
                        .HasColumnName("major_medical")
                        .HasColumnType("bit");

                    b.Property<double?>("MajorMedicalAmount")
                        .HasColumnName("major_medical_amount")
                        .HasColumnType("float");

                    b.Property<double?>("Prima")
                        .HasColumnName("prima")
                        .HasColumnType("float");

                    b.Property<int>("QualifyingEventId")
                        .HasColumnName("qualifying_event_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<double?>("SubTotal")
                        .HasColumnName("sub_total")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ClientProductId");

                    b.HasIndex("CoverId");

                    b.HasIndex("QualifyingEventId");

                    b.ToTable("alianzas");
                });

            modelBuilder.Entity("WebApi.Entities.Beneficiaries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlianzaId")
                        .HasColumnName("alianza_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("birth_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnName("gender")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Percent")
                        .IsRequired()
                        .HasColumnName("percent")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnName("relationship")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AlianzaId");

                    b.ToTable("beneficiaries");
                });

            modelBuilder.Entity("WebApi.Entities.BonaFides", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Benefits")
                        .HasColumnName("benefits")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Disclaimer")
                        .HasColumnName("disclaimer")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Siglas")
                        .HasColumnName("siglas")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("bona_fides");
                });

            modelBuilder.Entity("WebApi.Entities.CallReasons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("call_reasons");
                });

            modelBuilder.Entity("WebApi.Entities.Campaigns", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Origin")
                        .HasColumnName("origin")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("campaigns");
                });

            modelBuilder.Entity("WebApi.Entities.CanceledCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CanceledReasonsId")
                        .HasColumnName("canceled_reasons_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CanceledReasonsId");

                    b.ToTable("canceled_categories");
                });

            modelBuilder.Entity("WebApi.Entities.CanceledReasons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("canceled_reasons");
                });

            modelBuilder.Entity("WebApi.Entities.CanceledSubcategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CanceledCategoriesId")
                        .HasColumnName("canceled_categories_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CanceledCategoriesId");

                    b.ToTable("canceled_subcategories");
                });

            modelBuilder.Entity("WebApi.Entities.ChapterClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChapterId")
                        .HasColumnName("chapter_id")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnName("client_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<bool?>("NewRegistration")
                        .HasColumnName("new_registration")
                        .HasColumnType("bit");

                    b.Property<bool?>("Primary")
                        .HasColumnName("primary")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnName("registration_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ClientId");

                    b.ToTable("chapter_client");
                });

            modelBuilder.Entity("WebApi.Entities.Chapters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BonaFideId")
                        .HasColumnName("bona_fide_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<double>("Quota")
                        .HasColumnName("quota")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BonaFideId");

                    b.ToTable("chapters");
                });

            modelBuilder.Entity("WebApi.Entities.Cities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("RegionId")
                        .HasColumnName("region_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("WebApi.Entities.ClientCommunicationMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnName("client_id")
                        .HasColumnType("int");

                    b.Property<int>("CommunicationMethodId")
                        .HasColumnName("communication_method_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CommunicationMethodId");

                    b.ToTable("client_communication_method");
                });

            modelBuilder.Entity("WebApi.Entities.ClientDocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnName("client_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnName("document_type_id")
                        .HasColumnType("int");

                    b.Property<string>("SobImgUrl")
                        .HasColumnName("sob_img_url")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("client_document_type");
                });

            modelBuilder.Entity("WebApi.Entities.ClientProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnName("client_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProductId");

                    b.ToTable("client_product");
                });

            modelBuilder.Entity("WebApi.Entities.ClientUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlianzaId")
                        .HasColumnName("alianza_id")
                        .HasColumnType("int");

                    b.Property<byte>("CallType")
                        .HasColumnName("call_type")
                        .HasColumnType("tinyint");

                    b.Property<int>("ClientId")
                        .HasColumnName("client_id")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmationNumber")
                        .IsRequired()
                        .HasColumnName("confirmation_number")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.HasIndex("AlianzaId", "UserId")
                        .HasName("client_user_user_id");

                    b.ToTable("client_user");
                });

            modelBuilder.Entity("WebApi.Entities.Clients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgencyId")
                        .HasColumnName("agency_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnName("birth_date")
                        .HasColumnType("date");

                    b.Property<int>("CampaignId")
                        .HasColumnName("campaign_id")
                        .HasColumnType("int");

                    b.Property<string>("ContractNumber")
                        .HasColumnName("contract_number")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("Contribution")
                        .HasColumnName("contribution")
                        .HasColumnType("float");

                    b.Property<int>("CoverId")
                        .HasColumnName("cover_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnName("effective_date")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte?>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("Initial")
                        .HasColumnName("initial")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LastName1")
                        .IsRequired()
                        .HasColumnName("last_name_1")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LastName2")
                        .HasColumnName("last_name_2")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte?>("MaritalStatus")
                        .HasColumnName("marital_status")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("MedicareA")
                        .HasColumnName("medicare_a")
                        .HasColumnType("bit");

                    b.Property<bool?>("MedicareB")
                        .HasColumnName("medicare_b")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnName("phone_1")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone2")
                        .HasColumnName("phone_2")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("PreRegister")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pre_register")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Principal")
                        .HasColumnName("principal")
                        .HasColumnType("bit");

                    b.Property<int>("RetirementId")
                        .HasColumnName("retirement_id")
                        .HasColumnType("int");

                    b.Property<string>("Ssn")
                        .HasColumnName("ssn")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CoverId");

                    b.HasIndex("RetirementId");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("WebApi.Entities.CommunicationMethods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("communication_methods");
                });

            modelBuilder.Entity("WebApi.Entities.Countries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("WebApi.Entities.Covers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Alianza")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("alianza")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("('0')");

                    b.Property<bool?>("Beneficiary")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("beneficiary")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("('0')");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<int>("HealthPlanId")
                        .HasColumnName("health_plan_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Sob")
                        .HasColumnName("sob")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SobImg")
                        .HasColumnName("sob_img")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("HealthPlanId");

                    b.ToTable("covers");
                });

            modelBuilder.Entity("WebApi.Entities.CsvDatas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("CsvData")
                        .IsRequired()
                        .HasColumnName("csv_data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CsvFilename")
                        .IsRequired()
                        .HasColumnName("csv_filename")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("CsvHeader")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("csv_header")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("('0')");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("csv_datas");
                });

            modelBuilder.Entity("WebApi.Entities.Dependents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgencyId")
                        .HasColumnName("agency_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnName("birth_date")
                        .HasColumnType("date");

                    b.Property<int?>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnName("client_id")
                        .HasColumnType("int");

                    b.Property<string>("ContractNumber")
                        .HasColumnName("contract_number")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("CoverId")
                        .HasColumnName("cover_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnName("effective_date")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte?>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("Initial")
                        .HasColumnName("initial")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LastName1")
                        .HasColumnName("last_name_1")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LastName2")
                        .HasColumnName("last_name_2")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone1")
                        .HasColumnName("phone_1")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone2")
                        .HasColumnName("phone_2")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte?>("Relationship")
                        .HasColumnName("relationship")
                        .HasColumnType("tinyint");

                    b.Property<string>("Ssn")
                        .HasColumnName("ssn")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("CityId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CoverId");

                    b.ToTable("dependents");
                });

            modelBuilder.Entity("WebApi.Entities.DocumentCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("document_categories");
                });

            modelBuilder.Entity("WebApi.Entities.DocumentTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<int>("DocumentCategoryId")
                        .HasColumnName("document_category_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DocumentCategoryId");

                    b.ToTable("document_types");
                });

            modelBuilder.Entity("WebApi.Entities.Files", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnName("path")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnName("size")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("files");
                });

            modelBuilder.Entity("WebApi.Entities.HealthPlans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("health_plans");
                });

            modelBuilder.Entity("WebApi.Entities.Identity.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int>("FCreateUserId")
                        .HasColumnType("int");

                    b.Property<int>("FUpdUserId")
                        .HasColumnType("int");

                    b.Property<string>("IPAddress")
                        .HasColumnType("VARCHAR(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime>("UpdDt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdHostNm")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<DateTime>("UpdSysHostDt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdSysHostNm")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("UpdSysSqlUser")
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AppRole");
                });

            modelBuilder.Entity("WebApi.Entities.Identity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("VARCHAR(254)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ExpirationDt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FCreateUserId")
                        .HasColumnType("int");

                    b.Property<int>("FUpdUserId")
                        .HasColumnType("int");

                    b.Property<int>("FailRetryQty")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("VARCHAR(15)");

                    b.Property<bool>("IsChgPwd")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLock")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginDt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int>("LoginProviderId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("VARCHAR(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Reference1")
                        .HasColumnType("VARCHAR(30)");

                    b.Property<string>("Reference2")
                        .HasColumnType("VARCHAR(30)");

                    b.Property<string>("Reference3")
                        .HasColumnType("VARCHAR(30)");

                    b.Property<string>("Reference4")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)");

                    b.Property<DateTime>("UpdDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UpdHostNm")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<DateTime>("UpdSysHostDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CONVERT(date, GETDATE())");

                    b.Property<string>("UpdSysHostNm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(100)")
                        .HasDefaultValueSql("HOST_NAME()");

                    b.Property<string>("UpdSysSqlUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(100)")
                        .HasDefaultValueSql("SUSER_SNAME()");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(254)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LoginProviderId");

                    b.HasIndex("ApplicationId", "UserName")
                        .IsUnique();

                    b.ToTable("AppUser");

                    b.HasCheckConstraint("CK_AppUser_UserType", "UserType IN('ADMIN','USER') ");
                });

            modelBuilder.Entity("WebApi.Entities.Identity.Application", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("bit");

                    b.Property<string>("EmailApiKey")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("PrimaryColor")
                        .HasColumnType("VARCHAR(6)");

                    b.Property<string>("SenderEmail")
                        .HasColumnType("VARCHAR(254)");

                    b.HasKey("Id");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("WebApi.Entities.Identity.LoginProvider", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("LoginProvider");
                });

            modelBuilder.Entity("WebApi.Entities.Identity.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Icon")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("VARCHAR(2)");

                    b.Property<string>("Url")
                        .HasColumnType("VARCHAR(2083)");

                    b.HasKey("Id");

                    b.ToTable("MenuItem");
                });

            modelBuilder.Entity("WebApi.Entities.Identity.MenuPermission", b =>
                {
                    b.Property<int>("RoleMenuId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleMenuId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("MenuPermission");
                });

            modelBuilder.Entity("WebApi.Entities.Identity.OneTimePassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("DelFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("FCreateUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("0");

                    b.Property<int>("FUpdUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("0");

                    b.Property<string>("IPAddress")
                        .HasColumnType("VARCHAR(15)");

                    b.Property<string>("OTP")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UpdHostNm")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<DateTime>("UpdSysHostDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CONVERT(date, GETDATE())");

                    b.Property<string>("UpdSysHostNm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(100)")
                        .HasDefaultValueSql("HOST_NAME()");

                    b.Property<string>("UpdSysSqlUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(100)")
                        .HasDefaultValueSql("SUSER_SNAME()");

                    b.Property<string>("UserName")
                        .HasColumnType("VARCHAR(254)");

                    b.Property<int>("ValidDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "UserName");

                    b.HasIndex("ApplicationId", "UserName", "DelFlag");

                    b.ToTable("OneTimePassword");
                });

            modelBuilder.Entity("WebApi.Entities.Identity.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("WebApi.Entities.Identity.RoleMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("RoleId", "MenuItemId");

                    b.HasIndex("MenuItemId");

                    b.ToTable("RoleMenu");
                });

            modelBuilder.Entity("WebApi.Entities.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("WebApi.Entities.InsuranceAddOns", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Beneficiary")
                        .HasColumnType("bit");

                    b.Property<decimal>("CoverageCoupleRate")
                        .HasColumnName("coverage_couple_rate")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("CoverageFamilyRate")
                        .HasColumnName("coverage_family_rate")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("CoverageSingleRate")
                        .HasColumnName("coverage_single_rate")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<int>("HealthPlanId")
                        .HasColumnName("health_plan_id")
                        .HasColumnType("int");

                    b.Property<decimal>("IndividualRate")
                        .HasColumnName("individual_rate")
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("MinimumEE")
                        .HasColumnName("minimum_EE")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("VARCHAR(80)")
                        .HasMaxLength(255);

                    b.Property<int>("TypeCalculate")
                        .HasColumnName("type_calculate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("HealthPlanId");

                    b.ToTable("insurance_addOns");
                });

            modelBuilder.Entity("WebApi.Entities.InsuranceAddOnsRateAge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnName("age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<int>("InsuranceAddOnsId")
                        .HasColumnName("insurance_addOns_id")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnName("rate")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceAddOnsId");

                    b.ToTable("insurance_addOns_rate_age");
                });

            modelBuilder.Entity("WebApi.Entities.InsuranceBenefitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BenefitType")
                        .IsRequired()
                        .HasColumnName("benefit_type")
                        .HasColumnType("NVARCHAR(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<int>("ParentBenefitTypeID")
                        .HasColumnName("parent_benefit_type_id")
                        .HasColumnType("int");

                    b.Property<int>("RowOrder")
                        .HasColumnName("row_order")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("insurance_benefit_type");
                });

            modelBuilder.Entity("WebApi.Entities.InsurancePlanAddOns", b =>
                {
                    b.Property<int>("CoverId")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceAddOnsId")
                        .HasColumnType("int");

                    b.HasKey("CoverId", "InsuranceAddOnsId");

                    b.HasIndex("InsuranceAddOnsId");

                    b.ToTable("InsurancePlanAddOns");
                });

            modelBuilder.Entity("WebApi.Entities.InsurancePlanBenefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoverId")
                        .HasColumnName("cover_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<int>("InsuranceBenefitTypeId")
                        .HasColumnName("insurance_benefit_type_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("VARCHAR(max)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CoverId");

                    b.HasIndex("InsuranceBenefitTypeId");

                    b.ToTable("insurance_plan_benefit");
                });

            modelBuilder.Entity("WebApi.Entities.InsuranceRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnName("age")
                        .HasColumnType("int");

                    b.Property<int>("CoverId")
                        .HasColumnName("cover_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<decimal>("IndividualRate")
                        .HasColumnName("individual_rate")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("IndividualTobaccoRate")
                        .HasColumnName("individual_tobacco_rate")
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("PolicyYear")
                        .HasColumnName("policy_year")
                        .HasColumnType("int");

                    b.Property<DateTime>("RateEffectiveDate")
                        .HasColumnName("rate_effective_date")
                        .HasColumnType("date");

                    b.Property<DateTime>("RateExpirationDate")
                        .HasColumnName("rate_expiration_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CoverId");

                    b.ToTable("insurance_rate");
                });

            modelBuilder.Entity("WebApi.Entities.PasswordResets", b =>
                {
                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnName("token")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasIndex("Email")
                        .HasName("password_resets_email_index");

                    b.ToTable("password_resets");
                });

            modelBuilder.Entity("WebApi.Entities.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("products");
                });

            modelBuilder.Entity("WebApi.Entities.Prospects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnName("address_1")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnName("address_2")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("birth_date")
                        .HasColumnType("date");

                    b.Property<int>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnName("country")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName1")
                        .IsRequired()
                        .HasColumnName("last_name1")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LastName2")
                        .IsRequired()
                        .HasColumnName("last_name2")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Ssn")
                        .IsRequired()
                        .HasColumnName("ssn")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Zip4")
                        .IsRequired()
                        .HasColumnName("zip+4")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ZipcodeId")
                        .HasColumnName("zipcode_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ZipcodeId");

                    b.ToTable("prospects");
                });

            modelBuilder.Entity("WebApi.Entities.QualifyingEvents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnName("requirements")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("qualifying_events");
                });

            modelBuilder.Entity("WebApi.Entities.Regions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("regions");
                });

            modelBuilder.Entity("WebApi.Entities.Retirements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("retirements");
                });

            modelBuilder.Entity("WebApi.Entities.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("WebApi.Entities.States", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("states");
                });

            modelBuilder.Entity("WebApi.Entities.Tutors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnName("client_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PhiFileUrl")
                        .HasColumnName("phi_file_url")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("tutors");
                });

            modelBuilder.Entity("WebApi.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RememberToken")
                        .HasColumnName("remember_token")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("users_email_unique");

                    b.HasIndex("RoleId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("WebApi.Entities.Zipcodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("zipcodes");
                });

            modelBuilder.Entity("server.Entities.TypeOfRelationship", b =>
                {
                    b.Property<byte?>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeOfRelationship");
                });

            modelBuilder.Entity("WebApi.Entities.Alianzas", b =>
                {
                    b.HasOne("WebApi.Entities.ClientProduct", "ClientProduct")
                        .WithMany("Alianzas")
                        .HasForeignKey("ClientProductId")
                        .HasConstraintName("alianzas_client_product_id_foreign")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Covers", "Cover")
                        .WithMany("Alianzas")
                        .HasForeignKey("CoverId")
                        .HasConstraintName("alianzas_cover_id_foreign")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.QualifyingEvents", "QualifyingEvent")
                        .WithMany("Alianzas")
                        .HasForeignKey("QualifyingEventId")
                        .HasConstraintName("alianzas_qualifying_event_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Beneficiaries", b =>
                {
                    b.HasOne("WebApi.Entities.Alianzas", "Alianza")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("AlianzaId")
                        .HasConstraintName("beneficiaries_alianza_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.CanceledCategories", b =>
                {
                    b.HasOne("WebApi.Entities.CanceledReasons", "CanceledReasons")
                        .WithMany("CanceledCategories")
                        .HasForeignKey("CanceledReasonsId")
                        .HasConstraintName("canceled_categories_canceled_reasons_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.CanceledSubcategories", b =>
                {
                    b.HasOne("WebApi.Entities.CanceledCategories", "CanceledCategories")
                        .WithMany("CanceledSubcategories")
                        .HasForeignKey("CanceledCategoriesId")
                        .HasConstraintName("canceled_subcategories_canceled_categories_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.ChapterClient", b =>
                {
                    b.HasOne("WebApi.Entities.Chapters", "Chapter")
                        .WithMany("ChapterClient")
                        .HasForeignKey("ChapterId")
                        .HasConstraintName("chapter_client_chapter_id_foreign")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Clients", "Client")
                        .WithMany("ChapterClient")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("chapter_client_client_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Chapters", b =>
                {
                    b.HasOne("WebApi.Entities.BonaFides", "BonaFide")
                        .WithMany("Chapters")
                        .HasForeignKey("BonaFideId")
                        .HasConstraintName("chapters_bona_fide_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Cities", b =>
                {
                    b.HasOne("WebApi.Entities.Countries", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("cities_country_id_foreign")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Regions", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("cities_region_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.ClientCommunicationMethod", b =>
                {
                    b.HasOne("WebApi.Entities.Clients", "Client")
                        .WithMany("ClientCommunicationMethod")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("client_communication_method_client_id_foreign")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.CommunicationMethods", "CommunicationMethod")
                        .WithMany("ClientCommunicationMethod")
                        .HasForeignKey("CommunicationMethodId")
                        .HasConstraintName("client_communication_method_communication_method_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.ClientDocumentType", b =>
                {
                    b.HasOne("WebApi.Entities.Clients", "Client")
                        .WithMany("ClientDocumentType")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("client_document_type_client_id_foreign")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.DocumentTypes", "DocumentType")
                        .WithMany("ClientDocumentType")
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("client_document_type_document_type_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.ClientProduct", b =>
                {
                    b.HasOne("WebApi.Entities.Clients", "Client")
                        .WithMany("ClientProduct")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("client_product_client_id_foreign")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Products", "Product")
                        .WithMany("ClientProduct")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("client_product_product_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.ClientUser", b =>
                {
                    b.HasOne("WebApi.Entities.Alianzas", "Alianza")
                        .WithMany("ClientUser")
                        .HasForeignKey("AlianzaId")
                        .HasConstraintName("client_user_alianza_id_foreign");

                    b.HasOne("WebApi.Entities.Clients", "Client")
                        .WithMany("ClientUser")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("client_user_client_id_foreign")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Users", "User")
                        .WithMany("ClientUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("client_user_user_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Clients", b =>
                {
                    b.HasOne("WebApi.Entities.Agencies", "Agency")
                        .WithMany("Clients")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("clients_agency_id_foreign")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Campaigns", "Campaign")
                        .WithMany("Clients")
                        .HasForeignKey("CampaignId")
                        .HasConstraintName("clients_campaign_id_foreign")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Covers", "Cover")
                        .WithMany("Clients")
                        .HasForeignKey("CoverId")
                        .HasConstraintName("clients_cover_id_foreign")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Retirements", "Retirement")
                        .WithMany("Clients")
                        .HasForeignKey("RetirementId")
                        .HasConstraintName("clients_retirement_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Covers", b =>
                {
                    b.HasOne("WebApi.Entities.HealthPlans", "HealthPlan")
                        .WithMany("Covers")
                        .HasForeignKey("HealthPlanId")
                        .HasConstraintName("covers_health_plan_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Dependents", b =>
                {
                    b.HasOne("WebApi.Entities.Agencies", "Agency")
                        .WithMany("Dependents")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("dependents_agency_id_foreign");

                    b.HasOne("WebApi.Entities.Cities", "City")
                        .WithMany("Dependents")
                        .HasForeignKey("CityId")
                        .HasConstraintName("dependents_city_id_foreign");

                    b.HasOne("WebApi.Entities.Clients", "Client")
                        .WithMany("Dependents")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("dependents_client_id_foreign")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Covers", "Cover")
                        .WithMany("Dependents")
                        .HasForeignKey("CoverId")
                        .HasConstraintName("dependents_cover_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.DocumentTypes", b =>
                {
                    b.HasOne("WebApi.Entities.DocumentCategories", "DocumentCategory")
                        .WithMany("DocumentTypes")
                        .HasForeignKey("DocumentCategoryId")
                        .HasConstraintName("document_types_document_category_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Identity.AppUser", b =>
                {
                    b.HasOne("WebApi.Entities.Identity.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Identity.LoginProvider", "LoginProvider")
                        .WithMany()
                        .HasForeignKey("LoginProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Identity.MenuPermission", b =>
                {
                    b.HasOne("WebApi.Entities.Identity.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Identity.RoleMenu", "RoleMenu")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Identity.OneTimePassword", b =>
                {
                    b.HasOne("WebApi.Entities.Identity.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Identity.RoleMenu", b =>
                {
                    b.HasOne("WebApi.Entities.Identity.MenuItem", "MenuItem")
                        .WithMany("Roles")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Identity.AppRole", "Role")
                        .WithMany("MenuItems")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("WebApi.Entities.Identity.AppRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Identity.AppUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.InsuranceAddOns", b =>
                {
                    b.HasOne("WebApi.Entities.HealthPlans", "HealthPlans")
                        .WithMany("InsuranceAddOns")
                        .HasForeignKey("HealthPlanId")
                        .HasConstraintName("insurance_addOns_health_plan_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.InsuranceAddOnsRateAge", b =>
                {
                    b.HasOne("WebApi.Entities.InsuranceAddOns", "InsuranceAddOns")
                        .WithMany("RatesByAge")
                        .HasForeignKey("InsuranceAddOnsId")
                        .HasConstraintName("rates_by_age_insurance_addOns_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.InsurancePlanAddOns", b =>
                {
                    b.HasOne("WebApi.Entities.Covers", "Covers")
                        .WithMany("AddOns")
                        .HasForeignKey("CoverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.InsuranceAddOns", "InsuranceAddOns")
                        .WithMany()
                        .HasForeignKey("InsuranceAddOnsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.InsurancePlanBenefit", b =>
                {
                    b.HasOne("WebApi.Entities.Covers", "Covers")
                        .WithMany("BenefitTypes")
                        .HasForeignKey("CoverId")
                        .HasConstraintName("cover_insurance_plan_benefit_foreign")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.InsuranceBenefitType", "InsuranceBenefitType")
                        .WithMany()
                        .HasForeignKey("InsuranceBenefitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.InsuranceRate", b =>
                {
                    b.HasOne("WebApi.Entities.Covers", "Covers")
                        .WithMany("Rate")
                        .HasForeignKey("CoverId")
                        .HasConstraintName("cover_insurance_rate_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Prospects", b =>
                {
                    b.HasOne("WebApi.Entities.Cities", "City")
                        .WithMany("Prospects")
                        .HasForeignKey("CityId")
                        .HasConstraintName("prospects_city_id_foreign")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Zipcodes", "Zipcode")
                        .WithMany("Prospects")
                        .HasForeignKey("ZipcodeId")
                        .HasConstraintName("prospects_zipcode_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.States", b =>
                {
                    b.HasOne("WebApi.Entities.Countries", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("states_country_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Tutors", b =>
                {
                    b.HasOne("WebApi.Entities.Clients", "Client")
                        .WithMany("Tutors")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("tutors_client_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Users", b =>
                {
                    b.HasOne("WebApi.Entities.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("users_role_id_foreign")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Zipcodes", b =>
                {
                    b.HasOne("WebApi.Entities.Cities", "City")
                        .WithMany("Zipcodes")
                        .HasForeignKey("CityId")
                        .HasConstraintName("zipcodes_city_id_foreign")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
